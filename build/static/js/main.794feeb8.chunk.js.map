{"version":3,"sources":["Componentes/Radar.js","App.js","serviceWorker.js","index.js"],"names":["Radar","props","navigator","console","log","success","position","error","err","geolocation","getCurrentPosition","maximumAge","timeout","enableHighAccurancy","watchPosition","className","Component","App","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qRAGqBA,G,wBAEnB,WAAYC,GAAO,qEACXA,I,iFAIN,GAAI,gBAAiBC,UAAW,CAC5BC,QAAQC,IAAI,mBAGZ,IAAMC,EAAU,SAAAC,GACZH,QAAQC,IAAI,UAAWE,IAerBC,EAAQ,SAAAC,GACVL,QAAQC,IAAI,QAASI,IAcbN,UAAUO,YAAYC,mBAC9BL,EACAE,EACA,CACII,WAAY,IACZC,QAAS,IACTC,qBAAqB,IAMbX,UAAUO,YAAYK,cAClCT,EACAE,EACA,CACII,WAAY,EACZE,qBAAqB,SAQ7BV,QAAQC,IAAI,6B,+BAKhB,OACE,6BACE,yBAAKW,UAAU,SACb,yBAAKA,UAAU,gB,GA3EUC,cCYpBC,E,iLATX,OACE,6BACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,Y,GALQG,IAAMF,WCQlBG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BzB,UAAU0B,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACflC,UAAU0B,cAAcS,YAI1BlC,QAAQC,IACN,iHAKEuB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB5B,QAAQC,IAAI,sCAGRuB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAAjC,GACLJ,QAAQI,MAAM,4CAA6CA,MC1FjEkC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBzB,UAAW,CAGzE,GADkB,IAAI2C,IAAIC,GAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,GAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,GACHI,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CtD,UAAU0B,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLrC,QAAQC,IACN,oEArFAwD,CAAwBlC,EAAOC,GAI/BzB,UAAU0B,cAAc6B,MAAM3B,MAAK,WACjC3B,QAAQC,IACN,iHAMJqB,EAAgBC,EAAOC,OCtC/BC,K","file":"static/js/main.794feeb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './radar.css';\n\nexport default class Radar extends Component {\n  \n  constructor(props){\n    super(props)\n  }\n\n  componentDidMount(){\n    if ('geolocation' in navigator) {   // Lo primero que deben hacer es validar si el dispositivo soporta geolocacion\n        console.log('has geolocation')\n\n\n        const success = position => {   // Esta funcion va a ser un callback que va a recibir la posición del dispositivo\n            console.log('success', position)\n\n            /* \n                Position acá es un objeto con las siguientes propiedades:\n\n                latitude : la latitud\n                longitude : la longitud\n                altitude : la altitud en metros sobre el nivel del mar\n                accuracy : el radio, en metros que indica la incertidumbre de la medida de la posición\n                altitudeAccuracy : el radio, en metros que indica la incertidumbre de la medida de la altitud\n                heading : indica la direccion en la que este dispositivo se esta moviendo (con relacion al norte absoluto)\n                speed : la velocidad a la que se mueve en metros sobre segundo\n            */\n        }\n\n        const error = err => {\n            console.log('error', err)\n\n            /*\n                El error tiene dos valores, un código de error y un texto\n\n                el codigo puede ser\n                - 0 si es un error generico\n                - 1 si el usuario respondio que \"no\" al prompt de \"This webpage wants to know your location\"\n                - 2 si no se pudo determinar la ubicacion, por ejemplo, si no tiene acceso a los satelites de GPS ni a wifi\n                - 3 si no se pudo acceder al sensor en el tiempo limite\n            */\n        }\n\n        // Este metodo nos da la ubicación una unica vez\n        const loc = navigator.geolocation.getCurrentPosition(\n            success, // esta funcion se va a llamar si fue exitosa la medida\n            error,  // esta se va a llamar si no\n            { // estos parametros son para configurar la medida\n                maximumAge: 1000000,  // esto controla la cache de las mediciones, no necesitan cambiarlo\n                timeout: 1000, // si la medida toma un tiempo mayor a este parametro, se va a generar el error 3\n                enableHighAccurancy: true // highAccurancy gasta mas bateria y toma mas tiempo, pero tiene mejor accurancy\n            }\n        )\n\n\n        // Este metodo nos da la ubicacion cada vez que el usuario se mueva\n        const watcher = navigator.geolocation.watchPosition(\n            success,  // success se va a llamar dos veces por cada cambio de ubicacion\n            error,\n            {\n                maximumAge: 0,\n                enableHighAccurancy: true\n            }\n        )\n\n        // Para debuggear, usen sus developer tools > el menu de los tres puntos > More tools > Sensors > geolocation\n        // Pueden cambiar su ubicacion mientras desarrollan\n\n    } else {\n        console.log('doesnt have geolocation')\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"radar\">\n          <div className=\"sweep\"></div>\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './App.css'\nimport Radar from './Componentes/Radar';\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div>\n        <div className=\"App\">\n          <Radar/>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register();\n"],"sourceRoot":""}